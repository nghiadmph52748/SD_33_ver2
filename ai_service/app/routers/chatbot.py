from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from app.utils.lm_studio import lm_client
from app.utils.database import db_client
import logging

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/chatbot", tags=["Chatbot"])

class ChatRequest(BaseModel):
    message: str
    context: str = ""

class ChatResponse(BaseModel):
    message: str
    sources: str = ""
    query_type: str = ""

# OPTIMIZED SYSTEM PROMPT cho ti·∫øng Vi·ªát
SYSTEM_PROMPT = """
B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh cho h·ªá th·ªëng qu·∫£n l√Ω b√°n h√†ng GearUp - C·ª≠a h√†ng gi√†y th·ªÉ thao.

**Nhi·ªám v·ª• c·ªßa b·∫°n:**
- Tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p t·ª´ h·ªá th·ªëng
- Gi·∫£i th√≠ch r√µ r√†ng, chuy√™n nghi·ªáp, d·ªÖ hi·ªÉu
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n
- ƒê·ªãnh d·∫°ng s·ªë r√µ r√†ng (v√≠ d·ª•: "142 ƒë√¥i", "15,500,000 VNƒê")

**Phong c√°ch:**
- Ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
- S·ª≠ d·ª•ng emoji ph√π h·ª£p (üìä üí∞ ‚≠ê ‚ö†Ô∏è)
- Kh√¥ng b·ªãa ƒë·∫∑t th√¥ng tin kh√¥ng c√≥ trong d·ªØ li·ªáu
- N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, n√≥i r√µ "Kh√¥ng c√≥ d·ªØ li·ªáu"

**QUAN TR·ªåNG:** Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát!
"""

def detect_intent(message: str) -> str:
    """Detect user intent from message"""
    message_lower = message.lower()
    
    # Check low_stock first (higher priority)
    if any(word in message_lower for word in ["h·∫øt h√†ng", "s·∫Øp h·∫øt", "t·ªìn kho th·∫•p", "t·ªìn kho", "stock", "c√≤n l·∫°i", "s·ªë l∆∞·ª£ng c√≤n"]):
        return "low_stock"
    elif any(word in message_lower for word in ["b√°n ch·∫°y", "top", "ph·ªï bi·∫øn", "best seller"]):
        return "top_products"
    elif any(word in message_lower for word in ["doanh thu", "revenue", "t·ªïng ti·ªÅn", "thu nh·∫≠p"]):
        return "revenue"
    elif any(word in message_lower for word in ["kh√°ch h√†ng", "customer", "vip", "ng∆∞·ªùi mua"]):
        return "customers"
    else:
        return "general"

def query_database(intent: str, message: str) -> str:
    """Query database based on intent"""
    try:
        if intent == "top_products":
            products = db_client.get_top_selling_products(limit=5, days=30)
            
            if not products:
                return "Kh√¥ng c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m trong 30 ng√†y qua."
            
            context = "üìä **Top 5 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t (30 ng√†y qua):**\n\n"
            for i, p in enumerate(products, 1):
                total_sold = p.get('total_sold') or 0
                total_revenue = p.get('total_revenue') or 0
                context += f"{i}. **{p['product_name']}**\n"
                context += f"   - ƒê√£ b√°n: {total_sold} ƒë√¥i\n"
                context += f"   - Doanh thu: {total_revenue:,.0f} VNƒê\n\n"
            
            return context
        
        elif intent == "revenue":
            summary = db_client.get_revenue_summary(days=30)
            
            if not summary:
                return "Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu."
            
            # Handle None values from database
            total_orders = summary.get('total_orders') or 0
            total_revenue = summary.get('total_revenue') or 0
            avg_order_value = summary.get('avg_order_value') or 0
            unique_customers = summary.get('unique_customers') or 0
            
            context = "üí∞ **T·ªïng quan doanh thu (30 ng√†y qua):**\n\n"
            context += f"- T·ªïng ƒë∆°n h√†ng: {total_orders} ƒë∆°n\n"
            context += f"- T·ªïng doanh thu: {total_revenue:,.0f} VNƒê\n"
            context += f"- Gi√° tr·ªã ƒë∆°n trung b√¨nh: {avg_order_value:,.0f} VNƒê\n"
            context += f"- S·ªë kh√°ch h√†ng: {unique_customers} ng∆∞·ªùi\n"
            
            return context
        
        elif intent == "low_stock":
            products = db_client.get_low_stock_products(threshold=10)
            
            if not products:
                return "‚úÖ T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu c√≤n ƒë·ªß h√†ng."
            
            context = "‚ö†Ô∏è **S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng (‚â§10 ƒë√¥i):**\n\n"
            for i, p in enumerate(products, 1):
                context += f"{i}. **{p['product_name']}**"
                if p.get('color') or p.get('size'):
                    context += f" ({p.get('color', '')}"
                    if p.get('color') and p.get('size'):
                        context += f", "
                    context += f"{p.get('size', '')})"
                context += f"\n   - C√≤n l·∫°i: **{p['stock_quantity']} ƒë√¥i**\n\n"
            
            return context
        
        else:
            return "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tra c·ª©u:\n- Top s·∫£n ph·∫©m b√°n ch·∫°y\n- Doanh thu\n- T·ªìn kho\nB·∫°n mu·ªën bi·∫øt ƒëi·ªÅu g√¨?"
    
    except Exception as e:
        logger.error(f"Database query error: {e}")
        return f"L·ªói truy v·∫•n d·ªØ li·ªáu: {str(e)}"

@router.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """Chat with AI assistant"""
    try:
        # 1. Detect intent
        intent = detect_intent(request.message)
        logger.info(f"Detected intent: {intent}")
        
        # 2. Query database
        db_context = query_database(intent, request.message)
        
        # 3. Build messages for LLM
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": f"{request.message}\n\n**D·ªØ li·ªáu t·ª´ h·ªá th·ªëng:**\n{db_context}"}
        ]
        
        # 4. Call LM Studio
        response = lm_client.chat(
            messages=messages,
            temperature=0.3,
            max_tokens=500  # TƒÉng l√™n ƒë·ªÉ response ƒë·∫ßy ƒë·ªß
        )
        
        ai_message = response.choices[0].message.content
        
        return ChatResponse(
            message=ai_message,
            sources=db_context,
            query_type=intent
        )
    
    except Exception as e:
        logger.error(f"Chat error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/health")
async def health_check():
    """Check LM Studio connection"""
    is_connected, message = lm_client.test_connection()
    
    return {
        "lm_studio": "connected" if is_connected else "disconnected",
        "message": message,
        "model": lm_client.model,
        "base_url": lm_client.client.base_url
    }
